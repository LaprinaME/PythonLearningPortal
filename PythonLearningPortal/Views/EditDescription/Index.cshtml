@using PythonLearningPortal.ViewModels
@model List<TopicViewModel>

@{
    // Создание фиктивных описаний для тем и подтем
    var topicDescriptions = new Dictionary<int, string>
    {
        { 1, "История создания и развития языка программирования Python. Python, язык программирования с открытым исходным кодом, был создан Гвидо ван Россумом в конце 1980-х и начале 1990-х годов. Вдохновленный языком программирования ABC, Гвидо стремился создать простой и понятный язык, который был бы удобным для использования и изучения. Первая версия Python была выпущена в 1991 году. С течением времени язык прошел через несколько версий и значительных изменений, включая переход от Python 2 к Python 3. Версии Python 2 и Python 3. Python 2 был опубликован в 2000 году и продолжал развиваться в течение более чем десяти лет. Однако в 2008 году была выпущена версия Python 3, которая внесла ряд фундаментальных изменений и улучшений в язык. Переход с Python 2 на Python 3 был долгим и пошел не без проблем из-за несовместимости между версиями. Официальная поддержка Python 2 завершилась 1 января 2020 года, после чего разработчики призвали пользователей перейти на Python 3." },
        { 2, "Python - это высокоуровневый язык программирования, который широко используется для разработки разнообразных приложений, от веб-сайтов и научных вычислений до искусственного интеллекта и анализа данных. Он отличается простым и читабельным синтаксисом, что делает его идеальным выбором как для начинающих программистов, так и для опытных разработчиков." },
        { 3, "Python имеет множество интегрированных сред разработки (IDE) и текстовых редакторов, которые облегчают процесс написания, отладки и тестирования кода на этом языке. Некоторые из наиболее популярных IDE для Python включают PyCharm, Visual Studio Code, Jupyter Notebook и IDLE. Кроме того, существуют также легковесные текстовые редакторы, такие как Sublime Text, Atom и VS Code, которые поддерживают расширения для работы с Python. Выбор IDE или редактора зависит от предпочтений разработчика и требований проекта." },
        { 4, "Синтаксис Python – это совокупность правил, определяющих структуру программ на этом языке. Синтаксис Python представляет собой набор строго определенных правил, которые указывают, как писать программы на данном языке. Эти правила описывают и определяют, как будет написана и интерпретирована программа, включают в себя форматирование и построение кода, указывают, какие инструкции должны быть написаны программистом для корректного выполнения кода интерпретатором Python, а также обеспечивают правильную организацию кода и структуру программы на этом языке. Синтаксис является ключевым аспектом в понимании и использовании Python, поскольку он определяет, как команды и выражения должны быть написаны для правильного выполнения программы." },
        { 5, "Принцип работы функции input() очень прост: когда программа достигает строки кода, содержащей вызов этой функции, она останавливает свое выполнение и ожидает ввода текста от пользователя. После ввода и нажатия клавиши Enter, введенная строка передается программе для дальнейшей обработки. Функция input() предоставляет возможность эмулировать работу терминала, позволяя пользователю взаимодействовать с программой через ввод текста. Это чрезвычайно полезно для создания интерактивных программ, опросов, игр и других приложений, где требуется ввод данных от пользователя. Таким образом, использование функции input() в Python 3 является важным элементом создания интерактивных программ и обеспечивает простой и удобный способ получения пользовательского ввода данных в консоли." },
        { 6, "Операторы в Python - это символы, которые выполняют операции на одном или нескольких операндах. Они включают арифметические операторы (+, -, *, /), операторы сравнения (==, !=, <, >), логические операторы (and, or, not), операторы присваивания (=, +=, -=) и другие. Python также поддерживает операторы для работы с последовательностями, условными операторами и операторами цикла." },
    };
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Учебник Python</title>
    <link rel="stylesheet" href="@Url.Content("~/css/topic.css")">
    <style>
        /* Стили для якорей */
        .anchor {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, rgba(255, 192, 203, 0.7), rgba(255, 215, 0, 0.7), rgba(144, 238, 144, 0.7), rgba(135, 206, 250, 0.7), rgba(147, 112, 219, 0.7), rgba(255, 160, 122, 0.7), rgba(250, 128, 114, 0.7));
            color: #fff;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            z-index: 9999;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 24px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
            transition: background 0.3s, box-shadow 0.3s;
        }

            .anchor:hover {
                box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2), 0 2px 4px rgba(0, 0, 0, 0.15);
            }

            .anchor:active {
                box-shadow: 0 3px 5px rgba(0, 0, 0, 0.2), 0 1px 2px rgba(0, 0, 0, 0.15);
            }

        .anchor-up {
            bottom: auto;
            top: 20px;
        }

        .anchor svg {
            fill: #fff; /* Цвет стрелочек */
            width: 24px;
            height: 24px;
        }
    </style>
</head>
<body>
    @section Header {
        <header style=" background: linear-gradient(135deg, #FFC0CB, #FFD700, #90EE90, #87CEFA, #9370DB, #FFA07A, #FA8072);
    color: #fff; /* Цвет текста */
    text-align: center; /* Центрируем текст */
    padding: 20px 0; /* Добавляем отступы */">
            <h1>Учебник Python</h1>
            <div class="button-container" style="text-align: center;
    margin-top: 20px;
    width: 200px; /* Ширина контейнера */
    height: 40px; /* Высота контейнера */
    margin: 0 auto; /* Центрирование по горизонтали */">
                <form method="get" action="/Home/Index">
                    <button type="submit" style="padding: 8px 16px; /* Уменьшаем размер кнопки */
    width: 100%; /* Занимает всю доступную ширину контейнера */
    height: 100%; background: linear-gradient(135deg, #FFC0CB, #FFD700, #90EE90, #87CEFA, #9370DB, #FFA07A, #FA8072);
    color: #fff;
    border: 2px solid #555;
    border-radius: 5px;" class="return-button">
                        Вернуться на главную
                    </button>
                </form>
            </div>
            <div class="button-container" style="text-align: center;
    margin-top: 20px;
    width: 200px; /* Ширина контейнера */
    height: 40px; /* Высота контейнера */
    margin: 0 auto; /* Центрирование по горизонтали */">
                <form method="get" action="/MenuAdmin/Index">
                    <button type="submit" style="padding: 8px 16px; /* Уменьшаем размер кнопки */
    width: 100%; /* Занимает всю доступную ширину контейнера */
    height: 100%; background: linear-gradient(135deg, #FFC0CB, #FFD700, #90EE90, #87CEFA, #9370DB, #FFA07A, #FA8072);
    color: #fff;
    border: 2px solid #555;
    border-radius: 5px;" class="return-button">
                        Вернуться в меню
                    </button>
                </form>
            </div>
        </header>
    }
    <div class="sidebar">
        <h1 class="big-title">Список тем:</h1>
        <ul class="topics">
            @foreach (var topic in Model)
            {
                <li class="darkgreen" onclick="toggleContent('@topic.TopicId')">
                    <span class="topic-title">@topic.TopicTitle</span>
                    <p class="description" style="display: none;">@topicDescriptions.GetValueOrDefault(topic.TopicId, "Описание отсутствует")</p>
                </li>
            }
        </ul>
    </div>
    <main class='container'>
        @foreach (var topic in Model)
        {
            <div class="topic-content" id="@topic.TopicId" style="display: none;">
                <h2>@topic.TopicTitle</h2>
                <p class="description">@topicDescriptions.GetValueOrDefault(topic.TopicId, "Описание отсутствует")</p>
            </div>
        }
    </main>
    <script src="~/js/edittopic.js"></script>
    @section Footer {
        <footer style=" background: linear-gradient(135deg, #FFB6C1, #FFD700, #C0C0C0, #ADD8E6);
    color: #fff; /* Цвет текста */
    text-align: center; /* Центрируем текст */
    padding: 20px 0; /* Добавляем отступы */">
            <p>&copy; 2024 Учебник Python. Все права защищены.</p>
        </footer>
    }
    <a href="#" class="anchor anchor-up" onclick="scrollToTop()">&uarr;</a>

    <script>
        function scrollToTop() {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        }
    </script>
    <a href="#" class="anchor anchor-up" onclick="scrollToTop()">&uarr;</a>
    <a href="#bottom" class="anchor anchor-down" onclick="scrollToBottom()">&darr;</a>

    <script>
        function scrollToTop() {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        }

        function scrollToBottom() {
            const bottom = document.getElementById('bottom');
            bottom.scrollIntoView({ behavior: 'smooth' });
        }
    </script>
    <a id="bottom"></a>
</body>
</html>